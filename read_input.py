import logging
import numpy as np

# Read and distinguish between three different styles of calibration file.
# All different formats contain the coefficients c_0 ... c_4 of an up-to
# 5th-order polynomial:
# c_0 + c_1 * x ** 1 + ... + c_4 * x ** 4
#
# Supported formats are:
#
# 1) Coefficients in a column
#   c_0
#   c_1
#   ...
#   c_4
#
# 2) Coefficients in a line
#   c_0 c_1 ... c_4
#
# 3) A file that has a collection of coefficients in single lines, each line
# starting with the name of the corresponding histogram and a ':' (*)
#   hist1.txt:  c_0 c_1 ... c_4
#   hist2.txt:  c_0* c_1* ... c_4*
#
# The coefficients in lines can be separated by any whitespace.
# Lines with comments indicated by '#' are ignored.
#
# (*) This is exactly the format of a calibration list file which can be
# generated by the spectrum analysis program hdtv

_log = logging.getLogger("hari")

def calibrate(n_bins, cal_path, hist_path):
    # Allow only up to fourth-order polynomials
    coefficients = np.zeros(5)

    ncoefficient = 0

    with open(cal_path) as f:
        for line in f:
            line = line.strip().split()
            # Ignore lines with comments
            if line[0][0] == "#":
                continue
            if line[0][-1] == ':':
                # If first line fragment ends with ':', assume case 3)
                if line[0][0:-1] == hist_path.name:
                    coefficients = np.fromiter(line[1:5], dtype=np.float64)
                    break
            elif np.size(line) > 1:
                # If line has multiple entries, assume case 2)
                coefficients = np.fromiter(line[0:5], dtype=np.float64)
                break
            else:
                # Else: assume case 1) and keep reading lines
                coefficients[ncoefficient] = float(line[0])
                ncoefficient += 1
                if ncoefficient == 5:
                    break

        _log.info("Calibration polynomial:")
        for i, coeff in enumerate(coefficients):
            _log.info(f"\t{coeff} * x ** {i}")

    # Calibrate the bins
    bins = np.arange(n_bins)
    bins = np.polynomial.polynomial.polyval(bins, coefficients)

    return bins
