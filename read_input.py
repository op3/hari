import numpy as np
import re

# Read and distinguish between three different styles of calibration file. 
# All different formats contain the coefficients c_0 ... c_4 of an up-to 5th-order polynomial:
# c_0 + c_1 * x ** 1 + ... + c_4 * x ** 4
#
# Supported formats are:
#
# 1) Coefficients in a column
#   c_0
#   c_1
#   ...
#   c_4
#
# 2) Coefficients in a line
#   c_0 c_1 ... c_4
#
# 3) A file that has a collection of coefficients in single lines, each line starting with the name of the corresponding histogram and a ':' (*)
#   hist1.txt:  c_0 c_1 ... c_4
#   hist2.txt:  c_0* c_1* ... c_4*
#
# The coefficients in lines can be separated by any whitespace.
# Lines with comments indicated by '#' are ignored.
#
# (*) This is exactly the format of a calibration list file which can be generated by the spectrum analysis program 'hdtv'

def calibrate(n_bins, cal_filename, hist_filename, verbose):
    # Allow only up to fourth-order polynomials
    coefficients = np.zeros(5)

    ncoefficient = 0

    f = open(cal_filename)
    for line in f:
        line = line.split()
        # Ignore lines with comments
        if re.search("#", line[0]):
            continue
        # If lines have text at the first position, assume case 3)
        if re.search("[a-zA-Z]", line[0]):
            if re.search(hist_filename, line[0]):
                coefficients = [float(i) for i in line[1:5]] 
                break
        else:
            # If a line has no text at the first position, but has more than one entry, assume case 2)
            if np.size(line) > 1:
                coefficients = [float(i) for i in line[0:5]]
                break
            # Else: assume case 1) and keep reading lines
            coefficients[ncoefficient] = float(line[0])
            ncoefficient += 1
            if ncoefficient == 5:
                break

    if verbose:
        print("> Calibration polynomial:")
        for i in range(np.size(coefficients)):
            print("\t", coefficients[i]," * x **",i)

    f.close()

    # Calibrate the bins
    bins = np.arange(n_bins)
    bins = np.polynomial.polynomial.polyval(bins, coefficients)

    return bins

# Function to remove the suffix and path from a file name, e.g. convert
# '/home/user/file.txt' to 'file'
def remove_suffix_and_path(filename):
    # Find last occurrence of path separator "/" 
    # and last occurrence of file suffix indicator "."
    path = 0
    suffix = len(filename)

    for n,c in enumerate(filename):
        if c == "/":
            path = n
        if c == ".":
            suffix = n

    return filename[path + 1: suffix]

# Function to remove the path from a file name, e.g. convert
# '/home/user/file.txt' to 'file.txt'
def remove_path(filename):
    # Find last occurrence of path separator "/" 
    # and last occurrence of file suffix indicator "."
    path = 0

    for n,c in enumerate(filename):
        if c == "/":
            path = n

    return filename[path:]
